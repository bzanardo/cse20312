Lab 3 Report
Maria Beatriz Zanardo

  This program uses a linked list to add two numbers. This is done by
using two different classes: the LinkedList class and the Node class.
The Node class consists of the private attribute data, a pointer
called next, and an access funtion (GetData). This class, like all
classes and functions referred to in this report, is templated and
can use any data type. The constructor of the Node class works by
declaring the next pointer to NULL. 
  The LinkedList class uses the Node class to create a list. It has
as a private attribute a function to create a new node. It also 
containts (public) a Node pointer called head, which points to the
first element of the list. In the constructor, the head pointer is
set to NULL. In the destructor, the head pointer and the next pointer
(from the Node class) are used to parse through the list and delete
every Node. The LinkedList class also has the pushFront function 
that adds a new Node to the beginning of the list. This is done by
declaring a new Node (private function which creates a new Node 
object), setting the value of the head pointer to this new value, and
making the head pointer point to this new Node. The LikedList also
has a function called empty (which is only used in the destructor) 
that returns a whether the LikedList is empty or not. There is also
the print function, which usess a pointer to parse through all the
nodes in the list and dereferences their respective values. Lastly,
there's the nodeCount function which works similarly to the print 
function, but it actually counts the number of node and returns this
value as an integer.
  In the main function, two numbers are taken from standard input as
strings. Using interators to go through each string, each digit is
extracted (and converted to an integer) and added as a node to a
LinkedList (using the pushFront function). These two numbers stored
as LinkedLists (called Num1 and Num2) are then added together using
a function called addNumberLists (which also returns a LinkedList).
This function works by first checking which number has more digits
(using the nodeCount function). If the first LinkedList has more
nodes, a pointer is then set to the "head" of the list, and it is
incremented through (using next) until it reaches NULL. The same is
done to the second number, but the pointer is incremented manually
(not through a for loop). The process works the exact same if the
fist number has less digits (nodes) than the first, but then the
pointer to the second number is incremented through a for loop and
the pointer to the first is incremented manually.
  The addNumberLists function works by dereferencing the pointers
to the LinkedLists, storing them as ints (num1 and num2) and adding 
them together. If one of the pointers reaches NULL (end of list), the
value of the corresponding int (either num1 or num2) is set to zero.
If the sum of the two ints is greater than or equal to zero, 10 is
subtracted from the sum and a variable called carry is set to 1. This
variable is then added to the iteration of the loop (sum of next two
digits). Otherwise, the carry variable is set to zero. After each
digit is added, the sum value is then added to a LinkedList called
result, whis is returned as soon as the pointers have parsed through
all the nodes of the lists.

  
